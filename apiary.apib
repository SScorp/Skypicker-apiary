FORMAT: 1A
HOST: https://api.skypicker.com

# Skypicker.com API
Skypicker.com flights search API.

The default api endpoint is api.skypicker.com . You have to use https, always.
Currently, SLLv3 is disabled. Use TLS 1, 1.1 or 1.2 in your client config, if you get a handshake error response.

To implement the basic search, you need only the /places and /flights API calls.

To implement also the booking API, you need to use the booking_token hash containing all the needed flights data and pass it as parameters to check flights and also to save booking calls.

The places call contains the list of Skypicker API IDs, which are accepted by the /flights call in the flyFrom and to parameters. Basically, the IDs are the IATA airport and ISO country codes, 
but Skypicker uses also its own IDs as the engine can do very specific searches (currently anywhere and there could be other geo areas specified - "To the sea", "To party places" etc)

# Partner implementation notes

Use the parameter partner=picky for testing your implementation. Before going live, your account manager will assign your custom partner ID to you.

There is no development API, as most of the queries are simple GET requests that are not changing the state of any resource (except save_booking).
Feel free to use api.skypicker.com for the implementation and also testing.

Currently, all of our flights are economy class. We consider for now each passenger as an adult.

# How it works
For every search the rules are the same. Except deeplink! How **deeplink** works - scroll down.

1. Always **start with** https://api.skypicker.com/

2. Choose **one specific call** from list below (places, flights, flights_multi, check_flights, save_booking, paymill_payment, zooz_payment, watchdog), 
e.g. https://api.skypicker.com/places

3. For **specific searches** and filters use " **?** " after chosen call, e.g. /places?
Then **choose parameters** from specific call list, where every available parameter is described. 
Choose one of them and use it in exact form with " **=** ". Then **set a value** of the parameter,  e.g. https://api.skypicker.com/places?term=br
So term is used for suggestions of geo names and "br" returns city, airport codes or country names beginning with br.

You may want to **combine** more parameters, then always put " **&** " to separate them, e.g. https://api.skypicker.com/places?term=br&locale=cs
Now we have all geo names beginning with br in Czech language.

Some of the parameters are **mandatory** for use in specific calls. Check it in **Details** column of every parameter, 
e.g. in **flights search** parameters flyFrom, to, dateFrom and dateTo are required https://api.skypicker.com/flights?flyFrom=PRG&to=OPO&dateFrom=01/06/2015&dateTo=30/06/2015 
We get all flights from Prague to Porto, from Jun 6, 2015 until Jun 30, 2015

Correct date format is **dd/mm/YYYY**, e.g. 29/05/2015. 


#### Places
The basic places call is this

https://api.skypicker.com/places

#### Search
The basic flights call could look like this

https://api.skypicker.com/flights?flyFrom=CZ&to=OPO&dateFrom=10/10/2014&dateTo=20/10/2014&partner=picky

If there is the partner parameter specified, the response will contain the link directly to Skypicker booking, where user can book the specified flight.

For more specific searches and filters continue to this apiary specification, where every available parameter is described.


# GET /places{/id,?term,?locale, ?zoomLevelThreshold, ?bounds,?v}

Returns the list of Skypicker api ids. This ids has to be used in the SP search (flights API call)
From v2 (May 2014) flights also accepts parameters for city areas (LON,PAR...), even if they dont appear in the places call

+ Parameters
    + id = `SK` (optional, string) ... if given, the call returns the details only for the one specific id
    + term = `br` (optional, string) ... used for suggestions of geo names,"br" returns city, airport codes or country names beginning with br
    + locale = `cs` (optional, string) ... the locale of geo names in response, default is en
    + zoomLevelThreshold = `3` (optional, integer) ... zoom level on which this place should be shown
    + bounds = `lat_lo,lng_lo,lat_hi,lng_hi` (optional, string) ... filter only places in these bounds. "lo" corresponds to the southwest corner of the bounding box, "hi" corresponds to the northeast corner of that box
    + v = `1` (optional, integer)  ... the api version, from v2 it returns the new api ids for the whole world.

+ Request
    { "term":"BRQ" }

+ Response 200
    {
        "zoomLevelThreshold": 7,
        "numberOfAirports": 1,
        "sp_score": null,
        "value": "Brno",
        "rank": 8,
        "parentId": 1,
        "lat": 49.1952,
        "lng": 16.608,
        "type": 0,
        "id": "BRQ"
    }


# GET /flights{flyFrom,to,dateFrom,dateTo,?longitudeFrom,?latitudeFrom,?radiusFrom,?longitudeFrom,?longitudeTo,?latitudeTo,?radiusTo,?daysInDestinationFrom,?daysInDestinationTo,?returnFrom,?returnTo,?typeFlight,?passengers,?flyDays,?oneforcity,?onlyWorkingDays,?onlyWeekends,?directFlights,?locale,?partner}

A single flights search.

The google flights like filters (price_from,price_to and the next ones) are not well documented and even not tested for properly functioning, yet. 

+ Parameters

    + flyFrom (required, string,`CZ`) ... Skypicker api id of the departure destination. Can also accept a list of airport codes separated by a comma for multicity search. E.g. BRQ,PRG,BTS,BUD
    + to (required, string, `porto`) ... Skypicker api id of the arrival destination. Can also accept a list of airport codes separated by a comma for multicity search. E.g. BRQ,PRG,BTS,BUD
    + dateFrom (required, string,`08/02/2014`) ... search flights from this date (dd/mm/YYYY). **Use parameters dateFrom and dateTo as a daterange for the flight departure.**
        Parameter dateFrom 01/05/2014 and dateTo 30/05/2014 means, that the departure can be anytime between those dates.
        For the dates of the return flights, use the returnTo&returnFrom or daysInDestinationFrom & daysInDestinationTo parameters
    + dateTo (required, string,`08/03/2014`) ... search flights until this date (dd/mm/YYYY)

    + longitudeFrom = `14.0000` (optional, float) ... longitude of the pinpoint for geo based search, for the departure destination
    + latitudeFrom = `50.2000` (optional, float) ... lat of the pinpoint for geo based search, fot the departure destination
    + radiusFrom = `200` (optional, integer) ... search radius in km, max 250
        (radiusFrom works only with longitudeFrom and latitudeFrom. In this case, the **flyFrom** parameter is ignored)
        
    + longitudeTo = `14.0000` (optional, float) ... longitude of the pinpoint for geo based, for the arrival destination
    + latitudeTo = `50.2000` (optional, float) ... lat of the pinpoint for geo based search, for the arrival destination
    + radiusTo = `200` (optional, integer) ... search radius in km, max 250
        (radiusTo works only with longitudeTo and latitudeTo. In this case, the **to** parameter is ignored)
    
    + daysInDestinationFrom = `2` (optional, integer) ... the minimal length of stay in the destination given in the **to** parameter
    + daysInDestinationTo = `14` (optional, integer) ... the max length of stay in the destination given in the **to** parameter
        (use only one from the daysInDestination and returnFrom/returnTo parameters. If both of them are given, the API uses the daysInDest parameters
        and the return dates are ignored)
    
    + returnFrom = `08/03/2014` (optional, string) ... min return of the whole trip (dd/mm/YYYY)
    + returnTo = `08/04/2014` (optional, string) ... max return date of the whole trip (dd/mm/YYYY)
    
    + typeFlight = `oneway` (optional, string) ... switch for oneway/round flights search - will be deprecated in the near future
        (until then, you have to use the round parameter if one from the daysInDestination of returndate parameters is given.)
        
        + Values
            + `round`
            + `oneway`
            
    
    + oneforcity = `0` (optional, boolean) ... filters out the cheapest flights to every city covered by the **to** parameter
    
    + passengers = `1` (optional, integer) ... number of passengers. Default for defining the num of passengers.
    
    + adults = `0` (optional, integer) ... To specify number of childs, and infants, you can use adults&children&infants parameters. You have to specify all of those 3 parameters, otherwise the parameter passengers will be used. However, currently childs&infants are considered as adults in our search engine
    + children = `0` (optional, integer) ... number of childs
    + infants = `0` (optional, integer) ... number of infants
    
    + flyDays  = `[0,1,2,3,4,5,6]` (optional, list) ... the list of days for the departure (0-Sunday)
        (url encoded format for all days flyDays%5B%5D=0&flyDays%5B%5D=1&flyDays%5B%5D=2&flyDays%5B%5D=3&flyDays%5B%5D=4&flyDays%5B%5D=5&flyDays%5B%5D=6)
        
    + onlyWorkingDays = `0` (optional, boolean) ... search flights with departure only on working days
    + onlyWeekends = `0` (optional, boolean) ... search flights with departure only on weekends 
    + directFlights = `0` (optional, boolean) ... search only for direct flights

    + partner = `picky` (optional, string) ... partner ID. If present, in the result will be also a link to a specific trip directly to skypicker.com, with the affiliate id included (use picky partner ID for testing)
    + v = `2` (optional, integer) ... api version, defaults to 1, in case of 2 the response format contains additional information (country codes and names, for now used only on skypicker.com frontend)
    
    + xml = `0` (optional, integer) ... returns an xml response instead of json
    + curr = `eur` (optional, string) ... use this parameter to change the currency in the response
    
    + locale = `en` (optional, string) ... the language of city names in the response
        (more translations to be added)
        + Values
            + `en`
            + `cs`
            + `pl`
            + `pt`
            + `it`
            + `de`
            + `fr`
            + `ru`
            + `hu`
            + `sk`
            + `el`
            + `fi`
            + `nl`
            + `se`


    + price_from = `1` (optional, integer) ... result filter, minimal price
    + price_to = `10000` (optional, integer) ... result filter, maximal price

    + dtimefrom = `00:00` (optional, string) ... result filter, min. departure time (11:00 means 11AM, 23:00 means 11PM, everyone of this time filter has the some format)
    + dtimeto = `00:00` (optional, string)  ... result filter, max departure time
    + atimefrom = `00:00` (optional, string)  ... result filter, min arrival time
    + atimeto = `00:00` (optional, string)  ... result filter, max arrival time
    + returndtimefrom = `00:00` (optional, string)  ... result filter, min dep. time of the returning flight
    + returndtimeto = `00:00` (optional, string)  ... result filter, max dep. time of the returning flight
    + returnatimefrom = `00:00` (optional, string)  ... result filter, min arrival time of the returning flight
    + returnatimeto = `00:00` (optional, string)  ... result filter, min arrival time of the returning flight
    + stopoverfrom = `00:00` (optional, string)  ... result filter, min length of stopover, 48:00 means 2 days here (48 hours)
    + stopoverto = `00:00` (optional, string)  ... result filter, max length of stopover, 48:00 means 2 days here (48 hours)

    + booking_token = `hashed data` (optional, string)  ... a hash containing the encrypted flight data. This hash should be passed to check flights and save booking API calls in the booking v2 API
    
+ Response 200 (application/json)

{
    "connections": [
    ],
    "data": [
        {
        "aTimeUTC": 1413466500,
        "distance": 2159.06,
        "price": 73.33,
        "cityTo": "Porto",
        "flyFrom": "BRQ",
        "flyTo": "OPO",
        "dTimeUTC": 1413404100,
        "countryFrom": {
            "code": "CZ",
            "name": "Czech Republic"
        },
        "deep_link": "https:\/\/www.skypicker.com\/deep?from=BRQ&to=OPO&departure=15-10-2014&flightsId=209149102|209305413&affilid=picky&price=73.33&passengers=1&lang=en",
        "nightsInDest": null,
        "dTime": 1413411300,
        "id": "209149102|209305413",
        "fly_duration": "17h 20m",
        "cityFrom": "Brno",
        "aTime": 1413470100,
        "countryTo": {
            "code": "PT",
            "name": "Portugal"
        },
        "route": [
            {
            "aTimeUTC": 1413411900,
            "mapIdfrom": "brno",
            "mapIdto": "london",
            "flight_no": 8404,
            "dTime": 1413411300,
            "latTo": 51.5135984673,
            "flyTo": "STN",
            "return": 0,
            "id": "209149102",
            "airline": "FR",
            "lngTo": -0.1164722443,
            "cityTo": "London",
            "cityFrom": "Brno",
            "lngFrom": 16.608,
            "aTime": 1413415500,
            "flyFrom": "BRQ",
            "price": 19,
            "latFrom": 49.1952,
            "dTimeUTC": 1413404100
            },
            {
            "aTimeUTC": 1413466500,
            "mapIdfrom": "london",
            "mapIdto": "porto",
            "flight_no": 8345,
            "dTime": 1413461700,
            "latTo": 41.148959897,
            "flyTo": "OPO",
            "return": 0,
            "id": "209305413",
            "airline": "FR",
            "lngTo": -8.6125516891,
            "cityTo": "Porto",
            "cityFrom": "London",
            "lngFrom": -0.1164722443,
            "aTime": 1413470100,
            "flyFrom": "STN",
            "price": 42,
            "latFrom": 51.5135984673,
            "dTimeUTC": 1413458100
            }
        ]
        }
    ],
    "time": 1
}


# POST /flights_multi{partner,locale,curr}

    + partner (required, string,``) ... your partner ID
    + locale (optional, string,`en`) ... localization, if you are using it for flights
    + curr (optional, string,``) ... currency, if you are using it for flights
    
This call is able to do multi-city searches in parallel. The single search queries dont have to be connected in any way.

Accepts the same parameters as the /flights API call.

To do a request, send a POST json payload with a list of API parameters for each search query.

A sample python code for this call could look like the following (this is an example, all of the /flights parameters can be used)

```
import requests
import json

r = {"requests": [
         {"to": "PRG", "flyFrom": "AMS", "directFlights": 0, "dateFrom": "11/06/2015", "dateTo": "28/06/2015"},
         {"to": "AMS", "flyFrom": "OSL", "directFlights": 0, "dateFrom": "01/07/2015", "dateTo": "11/07/2015"}
]}

print requests.post('https://api.skypicker.com/flights_multi?partner=partnerID', data = json.dumps(r) ).json()
```

In the response root, the results field contains a list of responses for the posted queries. Each single element contains the same response as it would be a /flights API call.

Please keep in mind, that valid json quotes are only ", not '

Each result has its own deeplink which can be used to forward the user to Skypicker booking e.g. 
https://www.skypicker.com/deep?type=A&from=AMS&to=PRG&departure=28-06-2015&flightsId=225682230|227956401|226372190|226369315&affilid=picky&price=213.45&passengers=1&lang=en&booking_token=bcEuJfu3fWne+z+50B2d1FLlFWEq6njGjUEUpGFn1DvjlNr7ieM4H5cvU6x9XSmsOF3qfuD9WujYk8+45h72pV0Y0iQ3RYCY23jpAseZEWtKHdWd3k+oTdyMzC410kw0ZwqofGdUQ1LdbTvLvumLo7sFHpvlEh9mpmjKePCCBwGm5sI4cBE3Ys+/oLYuE3NXyGTJ2d1rHJpEdO8JnsEvPuFKpacVWlHBcbeh5wlmitEFW/6WGTL+dKmKl5rp1pEz
The total_price is the sum of all the prices.

The main_booking_token in the response root should be used for booking the flights, instead the booking_token in each single search query result.



# GET /deep{/from,to,?departure,?return,?lang,?currency,?price,?affilid,?passengers,?flightsId}

Skypicker uses its own URL address format and it is specific for every language and can be used in many ways.

If you dont want to deal with the creation of those addresses, use this API call, which will take the given parameters and make redirect to the correct URL

In most cases, you dont need to use this call, as the deeplink is already returned in the flights call, when the partner parameter is specified

**Start with** https://skypicker.com/deep? choose parameters from this list below. Add " **=** " and **set a value** of the parameter. For this call it is **mandatory** to use parameters **from** and **to**. Always put " **&** " to separate parameters. To search specific dates, use format **dd-mm-YYYY** , for interval dates **dd-mm-YYYY-dd-mm-YYYY**

e.g. 
https://skypicker.com/deep?from=PRG&to=OPO&departure=03-06-2015-18-06-2015&return=08-07-2015-13-07-2015 
We get all flights from Prague to Porto, from Jun 3, 2015 until Jun 18, 2015 and return flights from Porto to Prague, from Jul 8, 2015 until Jul 13, 2015.

e.g. **affilid=**   this is your partner ID - it is **necessary**, otherwise the sale will not be linked to you.

+ Parameters
    + from (required, string) ... flyfrom, airport code
    + to (required, string) ... the destination, accepts airport codes only
    + departure (optional, string) ... the departure date
    + return (optional, string) ... return date
    + lang (optional, string) ... language (based on that cheap-flights, vuelos-baratoos, levne-lety will appear in the url address)
    + currency (optional, string) ... currency
    + price (optional, string) ... price, specify in the given currency
    + affilid (optional, string) ... your affiliate id
    + passengers (optional, integer) ... number of passengers
    + flightsId (optional, string) ... the flight/trip id returned from the flights call

+ Response 301


# GET /check_flights{/pnum,?bnum,?flights}

Checks the prices of given flights in realtime. Returns all the data about flights


## Basic SP booking flow (simplified)
1. call check_flights until flights_check is not True
2. watch for flights_invalid to be False (if this is going to be True, one or more of the flights doesnt exist anymore and the whole trip is unbookable)
3. if flights_check is True and flights_invalid is False, book the flight with the save_booking API call and pay for it with one of the payment options


## Flow used on frontend (as an working implementation example)


1. User opens the flight details, this could be done by a) clicking on "Book" in results b) accessing url that contains flight_id

2. Front-end calls /check_flight to get information about flight (not just check, as the name suggest, but all the information)

3. Front-end renders the Summary view about flight and booking form

4. Front-end repeatedly calls /check_flight (every 15s) and update Summary (price can change)... it also remembers flight_checked from last response

5. Front-end also manually calls /check_flight when user changes some important booking input (number of passengers, number of bags)


```
If front-end receives flight_invalid = true in any response, it will exit booking form.

flight_checked value is only for remembered, but not yet acted upon
```

## After the User clicks on "Book" button

1. Form validation happens, if everything is OK, go to next step, otherwise prompt user to check form

2. If last value of flight_check was false, wait for next response of /check_flight and try to repeat

3. Only if last response of /check_flight flight_checked was true, Front-end will send form to /save_booking back-end

4. Back-end should check price on its own and only return successful response if price was checked, if price cannot be checked, return error message (code 510)

5. If front-end will receive success from /save_booking, it will show payment options.

6. In the meantime, periodic /check_flight still occurs and if flight_invalid is sent from backend, booking is exited on front-end




+ Parameters
    + pnum = `1` (required, integer) ... number of passengers
    + bnum = `0` (required, integer) ... number of bags
    + affily (optional, string) ... the affil ID
    + booked_at (optional, string) ... the ID of the site, where the booking was made. In most of cases, same as affily. The difference is, that affily can contain also any subIDs, while booked_at is only the basic partner ID
    + realtime (required, boolean) ... Try to avoid using this. Set to True for cases, when check flights cant be repeated or you want the response asap
    + booking_token (optional, string) ... the hash obtained from the /flights API call results

+ Response 200



{'bags_fee': 25.0,                                                             // price for the selected bags 
 'bags_price': {'1': 25.0, '2': 50.0},                                       // price for 1st and 2nd bag
 'book_fee': 0.0,                                                              // carriers fees
 'currency': 'EUR',                                                           
 'document_options': {'airport_checkin_price': 70,                            // Used on Skypickers backend. It is the fee, if the user wants to check in at the airport (otherwise, Skypicker handles the check in online at the carriers website)
                       'checkin_date': 1418332800,                             // Earliest possible online checkin date
                       'document_need': 1},                                    // 0 or 1 means passport or id card is needed only for checking, 2 means the booking cant be processed without requesting an id card/passport with expiration date from the passengers
 'eur_payment_price': 43.01,                                                   // SP only. The price in case, the user wants to pay in EUR (there is a discount applied, if the payment is processed on the Skypickers website)
 'extra_fee': 0,                                                               // any extra fees
 'fee_airline': 0.0,                                                           // 
 'flight_real_price': 17.0,                                                    
 'flights': [{'airline': {'Name': 'Ryanair',                                // list of flights, containing detailed information about each flight  and also about the flight carrier
                            'active': 1,
                            'affil_url': 'http://www.ryanair.com/',
                            'airport_checkin': 70,
                            'booking_doc_needed': 1,                            //  see the document_options.document_need field
                            'checkin': 7,                                       // days before departure when checkin is possible
                            'close_booking_hours': 6,                           // max hours before departure when the flight can be booked
                            'hand_height': 20,                                  // luggage info
                            'hand_length': 55,
                            'hand_weight': 10,
                            'hand_width': 40,
                            'hold_weight': 15,
                            'iata': 'FR',
                            'iatacode': 'FR',
                            'id': 11,
                            'lcc': 1,
                            'name': 'Ryanair',
                            'non_active_reason': None,
                            'passengers_in_search': 1,
                            'url': 'http://www.ryanair.com'},
               'atime': 1418596500.0,
               'atime_unix': 1418596500,
               'atime_unix_utc': 1418596500,                                   // flight arrival time timestmamp (UTC) 
               'atime_utc': 1418596500.0,
               'checkin': 1417987200.0,
               'currency': 'CZK',
               'disabled': None,
               'dst': 'STN',                                                  // flight destination airport IATA code
               'dst_id': 813,
               'dst_name': 'London',
               'dtime': 1418592000.0,
               'dtime_unix': 1418592000,                                        // flight departure timestamp (UTC)
               'dtime_unix_utc': 1418588400,                                  
               'dtime_utc': 1418588400.0,
               'eur': 17.0,
               'extra': '',
               'flight_no': 8404,                                              // together with the airline.iatacode creates the flight code
               'id': 215135987,
               'invalid': None,
               'passengers': '1',
               'passengers_flight_check': {'1': {'eur': 17,                  // SP only
                                                   'invalid': None,
                                                   'scraping_start': 1416230073.0,
                                                   'timestamp': 1416230102.0}},
               'price': 825,                                                   // DEPRECATED. original price for the given currency in the same array
               'return': 0,                                                    // valid for the whole trip. Indicates, if this flight is a part of the connected flights taking the passenger back to the starting destination
               'scraping_start': 1416230073.0,                                 // price update started at this timestamp. Should not be more than 5min in the past
               'src': 'BRQ',                                                  // flight starting destination IATA code
               'src_id': 7983,
               'src_name': 'Brno',
               'timestamp': 1416230102.0}],                                    // price update finished at this timestmap
 'flights_checked': True,                                                      // the prices of the flights in the flights array are all checked
 'flights_invalid': False,                                                     // no one of the flights is invalid, unable to book
 'flights_price': 17.0,                                                        // price of the flights in this trip
 'luggage': [55, 40, 20, 10, 15],                                              // smallest  possible luggage for this trip
 'one_passenger': 18.89,
 'route': ['BRQ', 'STN'],
 'server_time': 1416230124.0,                                                  
 'sp_fee': 1.89,                                                              
 'total': 43.89}                                                               // total price in the given currency for the whole booking, including bags and fees







# POST /save_booking{/pnum,?bnum,?flights}

Saves the user data from the booking form and returns a booking id

The POST should contain the defined parameters in the described json payload
The response is same as for check_flights, only with new parameters added

```
{ 'transaction_id': False,
'zooz_token': '4XWBRXPFUD4YSXXPGBKEUNSKR4',                                   // use this token to send credit card data to Zooz
'booking_id': 47808,                                                           // the unique booking identified (this ID will be also passed in the callbacks to identify the booking)
'sandbox': True,                                                               // indicates if the payment is processed in a sandbox mode. Can be also triggered by using Test Test as a passenger name
'status': 'success'
}
```

```
{  
               "lang":"en",
               "bags":0,                                            
               "passengers":[  
                  {  
                     "surname":"test",
                     "cardno":None,
                     "checkin":"REMOVED, DEPRECATED",
                     "phone":"+44 564564568456",
                     "birthday":724118400,
                     "nationality":"United Kingdom",
                     "issuer":"REMOVED, DEPRECATED",
                     "name":"test",
                     "title":"mr",
                     "expiration":None,
                     "email":"lubos@skypicker.com"
                  }
               ],
               "locale":"en",
               "price":18.89,                                           # has to be always in EUR using the SP rates.
               "customerLoginID":"unknown",
               "currency":"czk",
               "flights":[  
                  "215135987"
               ],
               "booking_token": "the hash obtained from /flights call results",
               "customerLoginName":"unknown",
               "affily":"affil_id",
               "booked_at":"affil_id",
               "eur_transaction":False,
               "visitor_uniqid":"7f24f70cb2b8d635ba1198887b4c2875"
            }
```


+ Parameters
    + lang (required, string) ... the booking language
    + bags (required, string) ... the number of bags
    + price (required, integer) ... the booking price, which was accepted by user. Has to be converted to EUR using the SP rates
    + flights (required, string) ... the list of flights IDs, separated by commas
    + passengers (required, array) ... array with details of the passengers
    + customerLoginID (optional, string) ... used for custom payments


+ Response 200
{'bags_fee': 0.0,
 'bags_price': {'1': 25.0, '2': 50.0},
 'book_fee': 0.0,
 'booking_id': 47808,
 'document_options': {'airport_checkin_price': 70,
                       'checkin_date': 1418332800,
                       'document_need': 1},
 'eur_payment_price': 18.51,
 'extra_fee': 0,
 'fee_airline': 0.0,
 'flight_real_price': 17.0,
 'flights': [{'airline': {'Name': 'Ryanair',
                            'active': 1,
                            'affil_url': 'http://www.ryanair.com/',
                            'airport_checkin': 70,
                            'booking_doc_needed': 1,
                            'checkin': 7,
                            'close_booking_hours': 6,
                            'hand_height': 20,
                            'hand_length': 55,
                            'hand_weight': 10,
                            'hand_width': 40,
                            'hold_weight': 15,
                            'iata': 'FR',
                            'iatacode': 'FR',
                            'id': 11,
                            'lcc': 1,
                            'name': 'Ryanair',
                            'non_active_reason': None,
                            'passengers_in_search': 1,
                            'url': 'http://www.ryanair.com'},
               'atime': 1418596500.0,
               'atime_unix': 1418596500,
               'atime_unix_utc': 1418596500,
               'atime_utc': 1418596500.0,
               'checkin': 1417987200.0,
               'currency': 'CZK',
               'disabled': None,
               'dst': 'STN',
               'dst_id': 813,
               'dst_name': 'London',
               'dtime': 1418592000.0,
               'dtime_unix': 1418592000,
               'dtime_unix_utc': 1418588400,
               'dtime_utc': 1418588400.0,
               'eur': 17.0,
               'extra': '',
               'flight_no': 8404,
               'id': 215135987,
               'invalid': None,
               'passengers': '1',
               'passengers_flight_check': {'1': {'eur': 17,
                                                   'invalid': None,
                                                   'scraping_start': 1416230073.0,
                                                   'timestamp': 1416230102.0}},
               'price': 825,
               'return': 0,
               'scraping_start': 1416230073.0,
               'src': 'BRQ',
               'src_id': 7983,
               'src_name': 'Brno',
               'timestamp': 1416230102.0}],
 'flights_checked': True,
 'flights_invalid': False,
 'flights_price': 17.0,
 'luggage': [55, 40, 20, 10, 15],
 'one_passenger': 18.89,
 'route': ['BRQ', 'STN'],
 'sandbox': True,
 'server_time': 1416230124.0,
 'sp_fee': 1.89,
 'status': 'success',
 'total': 18.89,
 'transaction_id': False,
 'zooz_token': 'xxxxxx'}

# POST /paymill_payment{/booking_id,?token,?sandbox}

Makes a paymill transaction

+ Parameters
    + booking_id (required, integer) ... the booking id you got from save_booking
    + token (required, string) ... the random string generated from the payment gateway used for payment (depends on the gateway)
    + sandbox (optional, bool) ... use sandbox for payment

+ Response 200

        {"status":"closed"}

# POST /zooz_payment{/booking_id,?token,?sandbox}

Makes a zooz transaction ( the implementation is done on frontend)

+ Parameters
    + booking_id (required, integer) ... the booking id you got from save_booking
    + token (required, string) ... the random string generated from the payment gateway used for payment (depends on the gateway)
    + sandbox (optional, bool) ... use sandbox for payment


+ Response 200

        {"status":"closed"}


# POST /watchdog{/name,email,max_price}

API call used for storing watchdog events in the database. Can be called with exactly the same parameters as the flights call.

Stealth mode

+ Response 200
    
        {"status":"OK"}

